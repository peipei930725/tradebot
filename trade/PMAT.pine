//@version=5
strategy("PMAT", overlay=true,  pyramiding=1, default_qty_type=strategy.percent_of_equity, default_qty_value=10,commission_value=0.05,initial_capital=1000)

startYear = input(2023, "Start Year")
startMonth = input(3, "Start Month")
startDay = input(15, "Start Day")//50
endYear = year(timenow)
endMonth = month(timenow)
endDay = dayofmonth(timenow)
startTime = timestamp(startYear, startMonth, startDay, 00, 00)
endTime = timestamp(endYear, endMonth, endDay, 23, 59)
timelock = input(bool(1) ,"Time lock")

// 判斷當前條是否在指定的時間範圍內
inDateRange = time >= startTime and time <= endTime or (not timelock) 

PMA12 = input.source(close, title="PMA12")
PMA144 = input.source(close, title="PMA144")
PMA169 = input.source(close, title="PMA169")
PMA576 = input.source(close, title="PMA576")
PMA676 = input.source(close, title="PMA676")


var prev_PMA12 = 0.0
var prev_PMA144 = 0.0
var prev_PMA169 = 0.0
var prev_PMA576 = 0.0
var prev_PMA676 = 0.0

PMA12diff = PMA12 - prev_PMA12//Differentia
PMA144diff = PMA144 - prev_PMA144
PMA169diff = PMA169 - prev_PMA169
PMA576diff = PMA576 - prev_PMA576
PMA676diff = PMA676 - prev_PMA676

prev_PMA12 := PMA12
prev_PMA144 := PMA144
prev_PMA169 := PMA169
prev_PMA576 := PMA576
prev_PMA676 := PMA676




// take profit
// gold_Cross_Enable = input(bool(1), title="gold_Cross_Enable")
// gold_Cross = input(25, title="gold_Cross")

break_Meddle_Enable = input(bool(1), title="break_Meddle_Enable")
break_Meddle = input(25, title="break_Meddle")

left_Take_Profit_Enable = input(bool(1), title="left_Take_Profit_Enable")
left_Take_Profit = input(50, title="left_Take_Profit")
left_Take_Profit_Mutiplier = input(2.0, title="left_Take_Profit_Mutiplier")
left_Take_Profit_Ratio = input(2.0, title="1:?")*left_Take_Profit_Mutiplier

var float left_Take_Profit_Price = na 


// var gold_Crossed = bool(0)
var break_Crossed = bool(0)
var left_Crossed = bool(0)


// 進場條件
long_InitCondition() =>
    conditionClose = close > PMA12 and close > PMA144 and close > PMA169 and close > PMA576 and close > PMA676
    conditionPMA12 = PMA12 > PMA144 and PMA12 > PMA169 and PMA12 > PMA576 and PMA12 > PMA676
    conditionPMA144 = PMA144>PMA576 and PMA144>PMA676
    conditionPMA169 = PMA169>PMA576 and PMA169>PMA676
    conditionDiff = PMA12diff>0 and PMA144diff>0 and PMA169diff>0 and PMA576diff>0 and PMA676diff>0
    long_IC = conditionClose and conditionPMA12 and conditionDiff and conditionPMA144 and conditionPMA169 and strategy.position_size<=0
    [long_IC]

// long_GoldCrossCondition() =>
//     conditionPMA144 = PMA144>PMA576 and PMA144>PMA676
//     conditionPMA169 = PMA169>PMA576 and PMA169>PMA676
//     long_GC = conditionPMA144 and conditionPMA169 and not gold_Crossed and strategy.position_size>0 and gold_Cross_Enable
//     [long_GC]

long_DivergenceMidCondition() =>
    conditionClose = close < PMA12 and close < PMA144  and close < PMA169 and close < PMA576 and close < PMA676
    conditionPMA12 = PMA12 < PMA144 and PMA12 < PMA169 and PMA12 < PMA576 and PMA12 < PMA676
    conditionDiff = PMA12diff<0 and PMA144diff<0 and PMA169diff<0 and PMA576diff<0 and PMA676diff<0
    long_DM = conditionClose and conditionPMA12 and conditionDiff and not break_Crossed and break_Meddle_Enable
    [long_DM]

long_LeftTakeProfitCondition() =>
    long_LTP = close > left_Take_Profit_Price and left_Take_Profit_Enable and not left_Crossed and strategy.position_size>0
    [long_LTP]

long_ExitCondition() =>
    conditionClose = close < PMA12 and close < PMA576 and close < PMA676
    conditionPMA12 = PMA12 < PMA576 and PMA12 < PMA676
    conditionDiff = PMA576diff<0 and PMA676diff<0
    long_EC = conditionClose and conditionPMA12 and conditionDiff
    [long_EC]


short_InitCondition() =>
    conditionClose = close < PMA12 and close < PMA144 and close < PMA169 and close < PMA576 and close < PMA676
    conditionPMA12 = PMA12 < PMA144 and PMA12 < PMA169 and PMA12 < PMA576 and PMA12 < PMA676
    conditionPMA144 = PMA144<PMA576 and PMA144<PMA676
    conditionPMA169 = PMA169<PMA576 and PMA169<PMA676
    conditionDiff = PMA12diff<0 and PMA144diff<0 and PMA169diff<0 and PMA576diff<0 and PMA676diff<0
    short_IC = conditionClose and conditionPMA12 and conditionDiff and conditionPMA144 and conditionPMA169 and strategy.position_size>=0
    [short_IC]

// short_GoldCrossCondition() =>
//     conditionPMA144 = PMA144<PMA576 and PMA144<PMA676
//     conditionPMA169 = PMA169<PMA576 and PMA169<PMA676
//     short_GC = conditionPMA144 and conditionPMA169 and not gold_Crossed and strategy.position_size<0 and gold_Cross_Enable
//     [short_GC]

short_DivergenceMidCondition() =>
    conditionClose = close > PMA12 and close > PMA144 
    conditionPMA12 = PMA12 > PMA144 and PMA12 > PMA169
    conditionDiff = PMA12diff>0 and PMA144diff>0 and PMA169diff>0 and PMA576diff<0 and PMA676diff<0
    short_DM = conditionClose and conditionPMA12 and conditionDiff and not break_Crossed and strategy.position_size<0 and break_Meddle_Enable
    [short_DM]

short_LeftTakeProfitCondition() =>
    short_LTP = close < left_Take_Profit_Price and left_Take_Profit_Enable and not left_Crossed and strategy.position_size<0
    [short_LTP]

short_ExitCondition() =>
    conditionClose = close > PMA12 and close > PMA576 and close > PMA676
    conditionPMA12 = PMA12 > PMA576 and PMA12 > PMA676
    conditionDiff = PMA576diff>0 and PMA676diff>0
    short_EC = conditionClose and conditionPMA12 and conditionDiff
    [short_EC]


// break_Hard = input.source(0.5, title="break_Hard")

// entry
leverage = input(1,"leverage")

[longCondition] = long_InitCondition()
// [longGoldCrossCondition] = long_GoldCrossCondition()
[longDivergenceMidCondition] = long_DivergenceMidCondition()
[longLeftTakeProfitCondition] = long_LeftTakeProfitCondition()
[longExitCondition] = long_ExitCondition()
[shortCondition] = short_InitCondition()
// [shortGoldCrossCondition] = short_GoldCrossCondition()
[shortDivergenceMidCondition] = short_DivergenceMidCondition()
[shortLeftTakeProfitCondition] = short_LeftTakeProfitCondition()
[shortExitCondition] = short_ExitCondition()




if(inDateRange)

    if(longCondition)
        strategy.close("Short")
        strategy.entry("Long", strategy.long, qty=strategy.equity/close*leverage)
        // gold_Crossed := bool(0)
        break_Crossed := bool(0)
        left_Crossed := bool(0)
        left_Take_Profit_Price := (close-math.min(PMA576,PMA676))*left_Take_Profit_Ratio+close

    // if(longGoldCrossCondition)
    //     strategy.close("Long","long gold take profit", qty_percent=gold_Cross)
    //     gold_Crossed :=  bool(1)
    if(longDivergenceMidCondition)
        strategy.close("Long","long div take profit", qty_percent=break_Meddle)
        break_Crossed := bool(1)
    if (longLeftTakeProfitCondition)
        strategy.close("Long","long left take profit", qty_percent=left_Take_Profit)
        left_Crossed := bool(1)

    if(longExitCondition)
        strategy.close("Long")


    if(shortCondition)
        strategy.close("Long")
        strategy.entry("Short",strategy.short, qty=strategy.equity/close*leverage)
        // gold_Crossed := bool(0)
        break_Crossed := bool(0)
        left_Crossed := bool(0)
        left_Take_Profit_Price := (close-math.max(PMA576,PMA676))*left_Take_Profit_Ratio+close
        
    // if(shortGoldCrossCondition)
    //     strategy.close("Short","short gold take profit", qty_percent=gold_Cross)
    //     gold_Crossed := bool(1)
    if(shortDivergenceMidCondition)
        strategy.close("Short","short div take profit", qty_percent=break_Meddle)
        break_Crossed := bool(1)
    if (shortLeftTakeProfitCondition)
        strategy.close("Short","short left take profit", qty_percent=left_Take_Profit)
        left_Crossed := bool(1)

    if(shortExitCondition)
        strategy.close("Short")



//plot
Debugger = input (bool(0), title="show Debugger?")
plot(longCondition and Debugger? 1 : na, title="longCondition")
// plot(longGoldCrossCondition and Debugger? 1 : na, title="longGoldCrossCondition")
plot(longDivergenceMidCondition and Debugger? 1 : na, title="longDivergenceMidCondition")
plot(longExitCondition and Debugger? 1 : na, title="longExitCondition")
plot(shortCondition and Debugger? 1 : na, title="shortCondition")
// plot(shortGoldCrossCondition and Debugger? 1 : na, title="shortGoldCrossCondition")
plot(shortDivergenceMidCondition and Debugger? 1 : na, title="shortDivergenceMidCondition")
plot(shortExitCondition and Debugger? 1 : na, title="shortExitCondition")
// plot(Debugger? gold_Cross : na, title="gold_Cross")
plot(Debugger? break_Meddle : na, title="break_Meddle")