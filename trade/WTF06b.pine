//@version=4
strategy("Combined WTT Volume and Fibonacci Channel Strategy", shorttitle="WTT+Fib", overlay=true)

// Fibonacci channel parameters
fibStartLength = input(75, minval=1, title="Fibonacci Lookback Period Start")
fibEndLength = input(25, minval=1, title="Fibonacci Lookback Period End")

// Calculate Fibonacci levels
highLevel = highest(high, fibStartLength)
lowLevel = lowest(low, fibEndLength)
fibRange = highLevel - lowLevel

fib786 = highLevel - fibRange * 0.786
fib618 = highLevel - fibRange * 0.618
fib500 = highLevel - fibRange * 0.500
fib382 = highLevel - fibRange * 0.382
fib236 = highLevel - fibRange * 0.236
fib1 = highLevel - fibRange * 1.0
fib1618 = highLevel - fibRange * 1.618
fib2618 = highLevel - fibRange * 2.618
fibLevels = array.new_float(0)
array.push(fibLevels, highLevel - fibRange * 0.786)
array.push(fibLevels, highLevel - fibRange * 0.618)
array.push(fibLevels, highLevel - fibRange * 0.500)
array.push(fibLevels, highLevel - fibRange * 0.382)
array.push(fibLevels, highLevel - fibRange * 0.236)
array.push(fibLevels, highLevel - fibRange * 1)
array.push(fibLevels, highLevel - fibRange * 1.618)
array.push(fibLevels, highLevel - fibRange * 2.618)
// WTT Volume Trend Logic
showTrend = input(true, "Show Volume Trend", group="Volume Trend")
trend_ma_length = input(5, "Volume Trend SMA length", type=input.integer, group="Volume Trend")
strong_volume_weighting_factor = input(0.8, "Strong volume weighting factor", type=input.float, minval=0.0, maxval=1.0, step=0.1, group="Volume Trend weighting factor")
weak_volume_weighting_factor = input(0.4, "Weak volume weighting factor", type=input.float, minval=0.0, maxval=1.0, step=0.1, group="Volume Trend weighting factor")
neutral_volume_weighting_factor = 1

C_Len = 10 // ema depth for bodyAvg
C_ShadowPercent = 5.0 // size of shadows
C_DojiBodyPercent = 8.5
C_BodyHi = max(close, open)
C_BodyLo = min(close, open)
C_Body = C_BodyHi - C_BodyLo
C_BodyAvg = ema(C_Body, C_Len)
C_SmallBody = C_Body < C_BodyAvg
C_LongBody = C_Body > C_BodyAvg
C_UpShadow = high - C_BodyHi
C_DnShadow = C_BodyLo - low

is_Bullish = close > open
is_Bearish = open > close
is_Doji = abs(close - open) <= ((high - low) * C_DojiBodyPercent / 100)

// Calculating Weighted Volume
weight_bullish = is_Doji ? neutral_volume_weighting_factor : is_Bullish ? 1 + strong_volume_weighting_factor : 1 - weak_volume_weighting_factor
weight_bearish = is_Doji ? neutral_volume_weighting_factor : is_Bearish ? 1 + strong_volume_weighting_factor : 1 - weak_volume_weighting_factor

volume_bullish = volume * weight_bullish
volume_bearish = volume * weight_bearish

bullish_sma = sma(volume_bullish, trend_ma_length)
bearish_sma = sma(volume_bearish, trend_ma_length)

bullishVolumeTrend = bullish_sma > bearish_sma
bearishVolumeTrend = bearish_sma > bullish_sma
// Strategy Entry and Exit Conditions
fibs = array.new_float(0)
array.push(fibs, fib786)
array.push(fibs, fib618)
array.push(fibs, fib500)
array.push(fibs, fib382)
array.push(fibs, fib236)
array.push(fibs, fib1)
array.push(fibs, fib1618)
array.push(fibs, fib2618)
plot(highLevel, color=color.red, linewidth=2, title="High Level")
plot(fib618, color=color.blue, linewidth=2, title="Fib 0.618 Level")
plot(fib500, color=color.purple, linewidth=2, title="Fib 0.500 Level") // New mid-level
plot(fib382, color=color.orange, linewidth=2, title="Fib 0.382 Level")
plot(fib236, color=color.green, linewidth=2, title="Fib 0.236 Level")
plot(lowLevel, color=color.red, linewidth=2, title="Low Level")
// Strategy Entry and Exit Conditions
longCondition = false
shortCondition = false

for i = 0 to array.size(fibs) - 1
    level = array.get(fibs, i)
    longConditionForLevel = crossover(close, level) and bullishVolumeTrend
    shortConditionForLevel = crossunder(close, level) and bearishVolumeTrend

    longCondition := longCondition or longConditionForLevel
    shortCondition := shortCondition or shortConditionForLevel

    // Exiting trades
    if (strategy.position_size > 0 and longConditionForLevel)
        strategy.exit("Exit Long " + tostring(i), "Long", limit=level)
    if (strategy.position_size < 0 and shortConditionForLevel)
        strategy.exit("Exit Short " + tostring(i), "Short", limit=level)
// Entering trades
if (longCondition)
    strategy.entry("Long", strategy.long)

if (shortCondition)
    strategy.entry("Short", strategy.short)